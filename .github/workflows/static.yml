<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML Geometry Diagrams</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 40px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .diagram-section {
            margin-bottom: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .diagram-section h2 {
            color: #4ecdc4;
            margin-bottom: 15px;
            font-size: 1.8em;
        }
        
        .equation {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 1.2em;
            margin: 15px 0;
            border-left: 4px solid #ff6b6b;
        }
        
        .controls {
            display: flex;
            gap: 20px;
            margin: 20px 0;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .control-group label {
            font-size: 0.9em;
            color: #4ecdc4;
        }
        
        input[type="range"] {
            width: 120px;
            height: 6px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.3);
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #4ecdc4;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }
        
        .plot-container {
            background: white;
            border-radius: 10px;
            margin: 20px 0;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        .description {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #4ecdc4;
        }
        
        .example {
            background: rgba(255, 107, 107, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #ff6b6b;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üßÆ ML Geometry: Lines, Planes & Hyperplanes</h1>
        
        <!-- Linear Equation (2D Line) -->
        <div class="diagram-section">
            <h2>üìà 1. Linear Equation (2D Line)</h2>
            <div class="equation">y = mx + b &nbsp;&nbsp;‚Üí&nbsp;&nbsp; y = w‚ÇÅx + w‚ÇÄ</div>
            
            <div class="controls">
                <div class="control-group">
                    <label>Weight (w‚ÇÅ): <span id="weight1-val">2</span></label>
                    <input type="range" id="weight1" min="-5" max="5" step="0.1" value="2">
                </div>
                <div class="control-group">
                    <label>Bias (w‚ÇÄ): <span id="bias1-val">1</span></label>
                    <input type="range" id="bias1" min="-10" max="10" step="0.1" value="1">
                </div>
            </div>
            
            <div class="plot-container">
                <div id="plot1" style="width:100%; height:400px;"></div>
            </div>
            
            <div class="example">
                <strong>Example:</strong> House Price Prediction<br>
                Price = 100 √ó Size + 50000<br>
                For 1000 sq ft: Price = 100(1000) + 50000 = $150,000
            </div>
        </div>
        
        <!-- 3D Plane -->
        <div class="diagram-section">
            <h2>üåê 2. 3D Plane</h2>
            <div class="equation">z = w‚ÇÅx + w‚ÇÇy + w‚ÇÄ</div>
            
            <div class="controls">
                <div class="control-group">
                    <label>Weight‚ÇÅ (w‚ÇÅ): <span id="weight2-val">2</span></label>
                    <input type="range" id="weight2" min="-3" max="3" step="0.1" value="2">
                </div>
                <div class="control-group">
                    <label>Weight‚ÇÇ (w‚ÇÇ): <span id="weight3-val">1</span></label>
                    <input type="range" id="weight3" min="-3" max="3" step="0.1" value="1">
                </div>
                <div class="control-group">
                    <label>Bias (w‚ÇÄ): <span id="bias2-val">0</span></label>
                    <input type="range" id="bias2" min="-5" max="5" step="0.1" value="0">
                </div>
            </div>
            
            <div class="plot-container">
                <div id="plot2" style="width:100%; height:500px;"></div>
            </div>
            
            <div class="example">
                <strong>Example:</strong> House Price with Size & Age<br>
                Price = 100√óSize - 2000√óAge + 50000<br>
                For 1000 sq ft, 10 years old: Price = 100(1000) - 2000(10) + 50000 = $130,000
            </div>
        </div>
        
        <!-- Hyperplane Classification -->
        <div class="diagram-section">
            <h2>üéØ 3. Hyperplane for Classification</h2>
            <div class="equation">w‚ÇÅx‚ÇÅ + w‚ÇÇx‚ÇÇ + w‚ÇÄ = 0 (Decision Boundary)</div>
            
            <div class="controls">
                <div class="control-group">
                    <label>Weight‚ÇÅ (w‚ÇÅ): <span id="weight4-val">1</span></label>
                    <input type="range" id="weight4" min="-3" max="3" step="0.1" value="1">
                </div>
                <div class="control-group">
                    <label>Weight‚ÇÇ (w‚ÇÇ): <span id="weight5-val">1</span></label>
                    <input type="range" id="weight5" min="-3" max="3" step="0.1" value="1">
                </div>
                <div class="control-group">
                    <label>Bias (w‚ÇÄ): <span id="bias3-val">0</span></label>
                    <input type="range" id="bias3" min="-5" max="5" step="0.1" value="0">
                </div>
            </div>
            
            <div class="plot-container">
                <div id="plot3" style="width:100%; height:400px;"></div>
            </div>
            
            <div class="example">
                <strong>Example:</strong> Email Spam Detection<br>
                2√ó(Exclamation_marks) + 3√ó(Capital_words) - (Length) + 1 = 0<br>
                ‚Ä¢ If > 0: Spam üö´<br>
                ‚Ä¢ If < 0: Not Spam ‚úÖ<br>
                ‚Ä¢ If = 0: Decision Boundary
            </div>
        </div>
        
        <div class="description">
            <h3>üîë Key Points:</h3>
            ‚Ä¢ <strong>Linear Regression:</strong> Uses line/plane equations for continuous predictions<br>
            ‚Ä¢ <strong>Classification:</strong> Uses hyperplanes as decision boundaries<br>
            ‚Ä¢ <strong>SVM:</strong> Finds optimal hyperplane that maximally separates classes<br>
            ‚Ä¢ <strong>Scaling:</strong> Hyperplane concept works in any dimension (n-D space)
        </div>
    </div>

    <script>
        // 2D Line Plot
        function updateLinePlot() {
            const w1 = parseFloat(document.getElementById('weight1').value);
            const w0 = parseFloat(document.getElementById('bias1').value);
            
            document.getElementById('weight1-val').textContent = w1;
            document.getElementById('bias1-val').textContent = w0;
            
            const x = [];
            const y = [];
            for (let i = -10; i <= 10; i += 0.5) {
                x.push(i);
                y.push(w1 * i + w0);
            }
            
            // Sample data points
            const sampleX = [-8, -5, -2, 1, 4, 7];
            const sampleY = sampleX.map(xi => w1 * xi + w0 + (Math.random() - 0.5) * 3);
            
            const trace1 = {
                x: x,
                y: y,
                mode: 'lines',
                name: `y = ${w1}x + ${w0}`,
                line: { color: '#ff6b6b', width: 3 }
            };
            
            const trace2 = {
                x: sampleX,
                y: sampleY,
                mode: 'markers',
                name: 'Data Points',
                marker: { color: '#4ecdc4', size: 10 }
            };
            
            Plotly.newPlot('plot1', [trace1, trace2], {
                title: 'Linear Regression Line',
                xaxis: { title: 'Feature (x)', range: [-10, 10] },
                yaxis: { title: 'Prediction (y)', range: [-25, 25] },
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)'
            });
        }
        
        // 3D Plane Plot
        function update3DPlot() {
            const w1 = parseFloat(document.getElementById('weight2').value);
            const w2 = parseFloat(document.getElementById('weight3').value);
            const w0 = parseFloat(document.getElementById('bias2').value);
            
            document.getElementById('weight2-val').textContent = w1;
            document.getElementById('weight3-val').textContent = w2;
            document.getElementById('bias2-val').textContent = w0;
            
            const x = [];
            const y = [];
            const z = [];
            
            for (let i = -5; i <= 5; i += 0.5) {
                for (let j = -5; j <= 5; j += 0.5) {
                    x.push(i);
                    y.push(j);
                    z.push(w1 * i + w2 * j + w0);
                }
            }
            
            const trace = {
                x: x,
                y: y,
                z: z,
                type: 'mesh3d',
                opacity: 0.7,
                colorscale: 'Viridis'
            };
            
            Plotly.newPlot('plot2', [trace], {
                title: '3D Plane: z = w‚ÇÅx + w‚ÇÇy + w‚ÇÄ',
                scene: {
                    xaxis: { title: 'Feature 1 (x)' },
                    yaxis: { title: 'Feature 2 (y)' },
                    zaxis: { title: 'Prediction (z)' },
                    camera: { eye: { x: 1.5, y: 1.5, z: 1.5 } }
                },
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)'
            });
        }
        
        // Hyperplane Classification Plot
        function updateClassificationPlot() {
            const w1 = parseFloat(document.getElementById('weight4').value);
            const w2 = parseFloat(document.getElementById('weight5').value);
            const w0 = parseFloat(document.getElementById('bias3').value);
            
            document.getElementById('weight4-val').textContent = w1;
            document.getElementById('weight5-val').textContent = w2;
            document.getElementById('bias3-val').textContent = w0;
            
            // Decision boundary line: w1*x1 + w2*x2 + w0 = 0
            // Solve for x2: x2 = -(w1*x1 + w0)/w2
            const x1_line = [];
            const x2_line = [];
            
            if (Math.abs(w2) > 0.001) {
                for (let x1 = -10; x1 <= 10; x1 += 0.1) {
                    const x2 = -(w1 * x1 + w0) / w2;
                    if (x2 >= -10 && x2 <= 10) {
                        x1_line.push(x1);
                        x2_line.push(x2);
                    }
                }
            }
            
            // Generate sample data points
            const class1_x1 = [], class1_x2 = [], class2_x1 = [], class2_x2 = [];
            
            for (let i = 0; i < 50; i++) {
                const x1 = (Math.random() - 0.5) * 16;
                const x2 = (Math.random() - 0.5) * 16;
                const value = w1 * x1 + w2 * x2 + w0;
                
                if (value > 0) {
                    class1_x1.push(x1);
                    class1_x2.push(x2);
                } else {
                    class2_x1.push(x1);
                    class2_x2.push(x2);
                }
            }
            
            const traces = [
                {
                    x: x1_line,
                    y: x2_line,
                    mode: 'lines',
                    name: 'Decision Boundary',
                    line: { color: '#333', width: 3 }
                },
                {
                    x: class1_x1,
                    y: class1_x2,
                    mode: 'markers',
                    name: 'Class 1 (Positive)',
                    marker: { color: '#ff6b6b', size: 8, symbol: 'circle' }
                },
                {
                    x: class2_x1,
                    y: class2_x2,
                    mode: 'markers',
                    name: 'Class 2 (Negative)',
                    marker: { color: '#4ecdc4', size: 8, symbol: 'square' }
                }
            ];
            
            Plotly.newPlot('plot3', traces, {
                title: `Classification: ${w1}x‚ÇÅ + ${w2}x‚ÇÇ + ${w0} = 0`,
                xaxis: { title: 'Feature 1 (x‚ÇÅ)', range: [-8, 8] },
                yaxis: { title: 'Feature 2 (x‚ÇÇ)', range: [-8, 8] },
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)'
            });
        }
        
        // Event listeners
        document.getElementById('weight1').addEventListener('input', updateLinePlot);
        document.getElementById('bias1').addEventListener('input', updateLinePlot);
        
        document.getElementById('weight2').addEventListener('input', update3DPlot);
        document.getElementById('weight3').addEventListener('input', update3DPlot);
        document.getElementById('bias2').addEventListener('input', update3DPlot);
        
        document.getElementById('weight4').addEventListener('input', updateClassificationPlot);
        document.getElementById('weight5').addEventListener('input', updateClassificationPlot);
        document.getElementById('bias3').addEventListener('input', updateClassificationPlot);
        
        // Initialize plots
        updateLinePlot();
        update3DPlot();
        updateClassificationPlot();
    </script>
</body>
</html>
